<?php

/**
 * @file
 * Contains cu_breadcrumbs.module.
 * Max McCoy 3.18.2019
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\node\Entity\NodeType;

/**
 * Implements hook_help().
 */
function cu_breadcrumbs_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the cu_breadcrumbs module.
    case 'help.page.cu_breadcrumbs':
      return '<h3>' . t('About') . '</h3>
      <p>' . t('Facilitates the application of Home (www.creighton.edu) and custom breadcrumbs to content types.') . '</p>
      <br><h3>' . t('Use') . '</h3>
      <p>' . t('During content type creation/edit, selecting "Apply custom breadcrumb" will apply custom breadcrumbs to all content of that type.') 
      . '</p>
      <p>' . t('To add more links to the breadcrumb, navigate to Structure->Menus add a menu titled "Breadcrumbs Menu".') 
      . '</p>
      <p>' . t('Any links added to this will be appended to the default home breadcrumb in the order specified in the menu.') 
      . '</p>';
  }
}

/**
 * Implements hook_form_node_type_add_form_alter().
 */
function cu_breadcrumbs_form_node_type_add_form_alter(&$form, FormStateInterface $form_state) {
  add_cu_breadcrumb_chkbox($form, $form_state);
}

/**
 * Implements hook_form_node_type_edit_form_alter().
 * does essentially the same thing as the add hook
 */
function cu_breadcrumbs_form_node_type_edit_form_alter(&$form, FormStateInterface $form_state) {
  add_cu_breadcrumb_chkbox($form, $form_state);
}
  
/**
 * Implements hook_form_node_type_edit_form_submit().
 */
function cu_breadcrumbs_form_submit(&$form, FormStateInterface $form_state) {
  //create an array of attributes(this is a leftover from the model implementation)
  $attributes = ['uuid'=>$form_state->getFormObject()->getEntity()->get('uuid')
                  ,'apply'=>$form_state->getValue('cu_breadcrumbs_apply')];
  //get the breadcrumbs editable configs
  $config = \Drupal::service('config.factory')->getEditable('cu_breadcrumb.config');
  //set values
  $config->set($attributes['uuid'],['uuid'=>$attributes['uuid'],'apply'=>$attributes['apply']]);
  //save them
  $config->save();
}

/**
 * Add the new checkbox to the form.
 */
function add_cu_breadcrumb_chkbox(&$form, FormStateInterface $form_state){
  // Add a checkbox to content type form w/default_value set to db value
  $form['cu_breadcrumbs_apply'] = array(
    '#type' => 'checkbox',
    '#title' => t("Apply custom breadcrumb"),
    //get breadcrumb config apply by content type uuid
    '#default_value'=> \Drupal::config('cu_breadcrumb.config')
                                ->get($form_state->getFormObject()
                                                  ->getEntity()
                                                  ->get('uuid'))['apply'],
  );
  //add cu breadcrumbs to form submit
  $form['#submit'][] = 'cu_breadcrumbs_form_submit';
  $form['actions']['submit']['#submit'][] = 'cu_breadcrumbs_form_submit';
}