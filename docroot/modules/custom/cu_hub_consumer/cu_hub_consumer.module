<?php

use Drupal\Core\Field\BaseFieldDefinition;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\Core\Session\AccountInterface;
use Drupal\field\FieldConfigInterface;
use Drupal\Core\Access\AccessResult;
use Drupal\Core\Render\Element;
use Drupal\Component\Plugin\DerivativeInspectionInterface;
use Drupal\cu_hub_consumer\Entity\HubReferenceTypeInterface;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\cu_hub_consumer\Entity\HubReferenceInterface;
use Drupal\Core\Template\Attribute;
use Drupal\Component\Utility\NestedArray;
use Drupal\cu_hub_consumer\Hub\ResourceFieldItemListInterface;
use Drupal\cu_hub_consumer\HubFieldStorageDefinition;

/**
 * Implements hook_field_formatter_info_alter().
 */
function cu_hub_consumer_field_formatter_info_alter(array &$info) {
  if (!empty($info['text_default'])) {
    $info['text_default']['field_types'][] = 'hub_text_long';
  }
  if (!empty($info['text_trimmed'])) {
    $info['text_trimmed']['field_types'][] = 'hub_text_long';
  }
}

/**
 * Implements hook_entity_base_field_info().
 */
function cu_hub_consumer_entity_base_field_info(EntityTypeInterface $entity_type) {
  if ($entity_type->id() === 'hub_reference') {
    $fields = [];

    $fields['path'] = BaseFieldDefinition::create('path')
      ->setLabel(t('URL alias'))
      ->setTranslatable(TRUE)
      ->setDisplayOptions('form', array(
        'type' => 'path',
        'weight' => 30,
      ))
      ->setDisplayConfigurable('form', TRUE)
      ->setComputed(TRUE);

    return $fields;
  }
}

/**
 * Implements hook_theme().
 */
function cu_hub_consumer_theme() {
  return [
    'hub_reference' => [
      'render element' => 'elements',
    ],
  ];
}

/**
 * Implements hook_theme_suggestions_HOOK().
 */
function cu_hub_consumer_theme_suggestions_hub_reference(array $variables) {
  $suggestions = [];

  /** @var \Drupal\cu_hub_consumer\Entity\HubReferenceInterface $hub_reference */
  $hub_reference = $variables['elements']['#hub_reference'];
  $sanitized_view_mode = strtr($variables['elements']['#view_mode'], '.', '_');

  $suggestions[] = 'hub_reference__' . $sanitized_view_mode;
  $suggestions[] = 'hub_reference__' . $hub_reference->bundle();
  $suggestions[] = 'hub_reference__' . $hub_reference->bundle() . '__' . $sanitized_view_mode;

  // Add suggestions based on the source plugin ID.
  $source = $hub_reference->getSource();
  if ($source instanceof DerivativeInspectionInterface) {
    $source_id = $source->getBaseId();
    $suggestions[] = 'hub_reference__source_' . $source_id;

    if ($derivative_id = $source->getDerivativeId()) {
      $source_id .= '_' . $derivative_id;
      $suggestions[] = 'hub_reference__source_' . $source_id;
    }
  }
  else {
    $source_id = $source->getPluginId();
    $suggestions[] = 'hub_reference__source_' . $source_id;
  }

  return $suggestions;
}

/**
 * Prepares variables for hub_reference templates.
 *
 * Default template: hub_reference.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - elements: An array of elements to display in view mode.
 *   - hub_reference: The hub_reference item.
 *   - name: The label for the hub_reference item.
 *   - view_mode: View mode; e.g., 'full', 'teaser', etc.
 */
function template_preprocess_hub_reference(array &$variables) {
  $variables['hub_reference'] = $variables['elements']['#hub_reference'];
  $variables['view_mode'] = $variables['elements']['#view_mode'];
  $variables['title'] = $variables['hub_reference']->label();

  // Helpful $content variable for templates.
  foreach (Element::children($variables['elements']) as $key) {
    $variables['content'][$key] = $variables['elements'][$key];
  }
}

/**
 * Implements hook_entity_access().
 */
function cu_hub_consumer_entity_access(EntityInterface $entity, $operation, AccountInterface $account) {
  if ($operation === 'delete' && $entity instanceof FieldConfigInterface && $entity->getTargetEntityTypeId() === 'hub_reference') {
    /** @var \Drupal\cu_hub_consumer\Entity\HubReferenceTypeInterface $hub_reference_type */
    //$hub_reference_type = \Drupal::entityTypeManager()->getStorage('media_type')->load($entity->getTargetBundle());
    //return AccessResult::forbiddenIf($entity->id() === 'media.' . $hub_reference_type->id() . '.' . $hub_reference_type->getSource()->getConfiguration()['source_field']);
  }
  return AccessResult::neutral();
}

/**
 * Implements hook_cron().
 */
function cu_hub_consumer_cron() {
  $lock = \Drupal::lock();

  if ($lock->acquire('cu_hub_consumer.cron')) {
    $queue_factory = \Drupal::service('queue');
    $list_fetch_queue = $queue_factory->get('hub_resource_list_fetch_worker');

    $bundles = \Drupal::service('entity_type.bundle.info')->getBundleInfo('hub_reference');
    foreach ($bundles as $bundle => $bundle_info) {
      // Create new queue item
      $item = new \stdClass();
      $item->bundle = $bundle;
      $item->url = '';
      $list_fetch_queue->createItem($item);
    }

    $lock->release('cu_hub_consumer.cron');
  }
  else {
    \Drupal::logger('cu_hub_consumer')->warning(t('Cron did not run because it is locked.'));
  }
}
