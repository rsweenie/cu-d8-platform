<?php

use Drupal\Core\Datetime\DrupalDateTime;
use Drupal\Core\Entity\FieldableEntityInterface;
use Drupal\Core\TypedData\Plugin\DataType\DateTimeIso8601;
use Drupal\datetime\DateTimeComputed;
use Drupal\datetime_range\Plugin\Field\FieldType\DateRangeFieldItemList;
use Drupal\taxonomy\Entity\Term;
use Drupal\Component\Utility\Html as HtmlUtility;
use Drupal\Core\Render\Markup;
use Drupal\Component\Render\HtmlEscapedText;

function cu2019_grad_preprocess_node(&$variables) {
  $node = $variables['node'];

  $variables['breadcrumb_links'] = \Drupal::service('breadcrumb')->build(\Drupal::routeMatch())->getLinks();
  // Uncomment the following to test with empty breadcrumbs.
  //$variables['breadcrumb_links'] = FALSE;

  if ($node->bundle() == 'interior_page') {
    if ($node->hasField('field_interior_page_side_nav') && !$node->field_interior_page_side_nav->isEmpty()) {
      $variables['side_nav_type'] = $node->get('field_interior_page_side_nav')->getString();
      switch ($variables['side_nav_type']) {
        case 'siblings':
          // @TODO do we need to make adjustments to the cache tags?
          $variables['side_nav'] = _cu2019_grad_get_menu_sibling_tree();
          break;
      }
    }
  }
}

function cu2019_grad_preprocess_hub_resource__paragraph__hub_paragraph_next_steps(&$variables) {
  //$variables['shmeh'] = "GUSHMUHH!";
}

function cu2019_grad_preprocess_field__field_interior_page_content(&$variables) {
  $element = $variables['element'];

  if ($paragraphs = $element['#items']->referencedEntities()) {
    foreach ($variables['items'] as $key => &$item) {
      if (isset($paragraphs[$key])) {
        $item['attributes']->addClass('paragraph-type-' . $paragraphs[$key]->bundle());
      }
    }
  }
}

function cu2019_grad_preprocess_paragraph(&$variables) {
  $paragraph = $variables['paragraph'];
  $variables['par_id'] = $paragraph->id();
  $variables['par_type'] = $paragraph->getType();

  $parent_field = $paragraph->get('parent_field_name')->value;
  $variables['parent'] = $parent_field;

  if ($paragraph->hasField('field_fwp_color') && !$paragraph->field_fwp_color->isEmpty()) {
    $variables['bg_style'] = $paragraph->get('field_fwp_color')->getString();
    switch ($variables['bg_style']) {
      case 'grey':
        $variables['overlay'] = 'bg-grey';
        break;
      default:
        $variables['overlay'] = 'bg-blue';
        break;
    }
  }

  $variables['bg_class'] = 'bg-secondary';
  if ($paragraph->hasField('field_stat_highlite_style') && !$paragraph->field_stat_highlite_style->isEmpty()) {
    $variables['bg_style'] = $paragraph->get('field_stat_highlite_style')->getString();
    switch ($variables['bg_style']) {
      case 'color2':
        $variables['bg_class'] = 'bg-primary';
        break;
      case 'color3':
        $variables['bg_class'] = 'bg-gray2';
        break;
      default:
        $variables['bg_class'] = 'bg-secondary';
        break;
    }
  }

  if ($paragraph->hasField('field_mfsfa_type') && !$paragraph->field_mfsfa_type->isEmpty()) {
    $variables['mfsfa_type'] = $paragraph->get('field_mfsfa_type')->getString();
    switch ($variables['mfsfa_type']) {
      case 'optionFaculty':
        $variables['highlite_tag'] = 'Faculty Spotlight';
        break;
      case 'optionAlumni':
        $variables['highlite_tag'] = 'Alumni Spotlight';
        break;
    }
  }

  if ($paragraph->hasField('field_next_step_icon') && !$paragraph->field_next_step_icon->isEmpty()) {
    $variables['icon'] = $paragraph->get('field_next_step_icon')->getString();
  }

  if ($paragraph->hasField('field_mfsi_source_type') && !$paragraph->field_mfsi_source_type->isEmpty()) {
    $variables['mfs_type'] = $paragraph->get('field_mfsi_source_type')->getString();
    switch($variables['mfs_type']) {
      case 'Blog':
        $variables['mfs_icon'] = 'icon icon-blog';
        break;
      case 'News':
        $variables['mfs_icon'] = 'icon icon-news';
        break;
      case 'Event':
        $variables['mfs_icon'] = 'icon icon-event-calendar';
        break;
    }
  }

  if ($paragraph->hasField('field_mfse_date')) {
    /** @var DateRangeFieldItemList $field */
    $dateRange = $paragraph->get('field_mfse_date')->first();
    $start_date = $dateRange->get('value')->getValue();
    $end_date = $dateRange->get('end_value')->getValue();

    $variables['multi_day'] = ($start_date != $end_date)? TRUE : FALSE;
    list($variables['start_month'], $variables['start_day']) = explode(' ', $dateRange->get('start_date')->getValue()->format('M j'));
  }

  if ($paragraph->getType() == 'image_video') {
    if ($paragraph->hasField('field_image_video_media') && !$paragraph->field_image_video_media->isEmpty()) {
      if ($media = $paragraph->field_image_video_media->referencedEntities()) {
        $media = reset($media);
        $variables['media_type'] = $media->bundle();

        // If this is a video, try to fetch the required render array.
        if ($media->bundle() == 'video') {
          $provider_manager = \Drupal::service('video_embed_field.provider_manager');
          $provider = $provider_manager->loadProviderFromInput($media->field_media_video_embed_field->value);
          if ($provider) {
            $video =  $provider->renderEmbedCode(560, 315, FALSE);
            $variables['video'] = $video;
          }
        }
      }
    }
  }

}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function cu2019_grad_theme_suggestions_field_alter(&$suggestions, $variables) {
  $element = $variables['element'];

  $field_name = $element['#field_name'];
  $view_mode = $element['#view_mode'];
  $entity_type = $element['#entity_type'];
  $bundle = $element['#bundle'];

  // Add view mode based suggestions if this view mode doesn't use layout builder.
  if (strpos($view_mode, 'layout_builder-') !== 0) {
    $suggestions[] = 'field__' . $field_name . '__' . $view_mode;
    $suggestions[] = 'field__' . $entity_type . '__' . $field_name . '__' . $view_mode;
    $suggestions[] = 'field__' . $entity_type . '__' . $field_name . '__' . $bundle . '__' . $view_mode;
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function cu2019_grad_preprocess_field(&$variables) {
  // Get the URL of the parent entity.
  if (!empty($variables['element']['#object'])) {
    $entity = $variables['element']['#object'];

    // In the case of a paragraph we actually want the parent entity.
    $entity = _cu2019_grad_find_root_entity($entity);

    try {
      $variables['entity_url'] = $entity->toUrl('canonical')->toString();
    }
    catch (\Exception $e) {
      // We don't need to do anything if a canonical isn't available.
    }
  }
}

/**
 * Get the root entity.
 * 
 * Will recurse through things like paragraphs till we hit a regular entity.
 *
 * @param mixed $entity
 * @return mixed
 */
function _cu2019_grad_find_root_entity($entity) {
  // There might be paragraphs within paragraphs, so let's follow it back to a node.
  if ($entity && ($entity->getEntityTypeId() == 'paragraph')) {
    $entity = _cu2019_grad_find_root_entity($entity->getParentEntity());
  }

  return $entity;
}

/**
 * Implements hook_preprocess_HOOK().
 */
function cu2019_grad_preprocess_views_view(&$variables) {
  $variables['breadcrumb_links'] = \Drupal::service('breadcrumb')->build(\Drupal::routeMatch())->getLinks();
}

/**
 * Implements hook_preprocess_HOOK().
 */
function cu2019_grad_preprocess_hub_resource_field__field_hub_fac_spotlight_type(&$variables) {
  $value = &$variables['items'][0]['content']['#context']['value'];
  switch ($value) {
    case 'fac':
      $value = 'Faculty spotlight';
      break;
    case 'alum':
      $value = 'Alumni spotlight';
      break;
    default:
      $value = '';
      break;
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function cu2019_grad_preprocess_hub_resource_field__paragraph_course_date__field_hub_cd_date(&$variables) {
  foreach ($variables['items'] as $key => $item) {
    $date =  new Datetime($item['content']['#attributes']['datetime']);
    $variables['items'][$key]['content']['month'] = $date->format('M');
    $variables['items'][$key]['content']['day'] = $date->format('j');
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function cu2019_grad_preprocess_hub_resource__taxonomy_term__program_availability(&$variables){
  $name = $variables['resource_obj']->getProcessedData()['name']->get(0)->getValue();

  if ($name == 'Hybrid') {
    $variables['content']['#markup'] = 'On-Campus and Online';
  }
}

// Returns a render array with the sub-tree of the current active link.
function _cu2019_grad_get_menu_sub_tree($menu_name = 'main') {
  $menu_tree = \Drupal::menuTree();

  $parameters = $menu_tree->getCurrentRouteMenuTreeParameters($menu_name);
  $currentLinkId = reset($parameters->activeTrail);

  if ($currentLinkId) {
    $parameters->setRoot($currentLinkId);
    $parameters->setMinDepth(1);
    $parameters->setMaxDepth(1);
    $tree = $menu_tree->load($menu_name, $parameters);

    // Transform the tree using the manipulators you want.
    $manipulators = array(
      // Only show links that are accessible for the current user.
      array('callable' => 'menu.default_tree_manipulators:checkAccess'),
      // Use the default sorting of menu links.
      array('callable' => 'menu.default_tree_manipulators:generateIndexAndSort'),
    );
    $tree = $menu_tree->transform($tree, $manipulators);

    // Finally, build a renderable array.
    $build = $menu_tree->build($tree);

    // Mark this as being in the special "embedded" region so it's available in
    // template suggestions.
    $build['#attributes']['data-region'] = 'embedded';

    return $build;
  }
}

// Returns a render array with the sub-tree of the current active link.
function _cu2019_grad_get_menu_sibling_tree($menu_name = 'main') {
  $menu_tree = \Drupal::menuTree();

  $parameters = $menu_tree->getCurrentRouteMenuTreeParameters($menu_name);
  $currentLinkId = reset($parameters->activeTrail);
  $parentLinkId = next($parameters->activeTrail);

  if ($parentLinkId) {
    $parameters->setRoot($parentLinkId);
    $parameters->setMinDepth(1);
    $parameters->setMaxDepth(1);
    $tree = $menu_tree->load($menu_name, $parameters);

    // Transform the tree using the manipulators you want.
    $manipulators = array(
      // Only show links that are accessible for the current user.
      array('callable' => 'menu.default_tree_manipulators:checkAccess'),
      // Use the default sorting of menu links.
      array('callable' => 'menu.default_tree_manipulators:generateIndexAndSort'),
    );
    $tree = $menu_tree->transform($tree, $manipulators);

    // Finally, build a renderable array.
    $build = $menu_tree->build($tree);

    // Mark this as being in the special "embedded" region so it's available in
    // template suggestions.
    $build['#attributes']['data-region'] = 'embedded';

    return $build;
  }
}
