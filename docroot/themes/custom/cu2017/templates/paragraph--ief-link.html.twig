{#
/**
 * @file
 * Default theme implementation to display a paragraph.
 *
 * Available variables:
 * - paragraph: Full paragraph entity.
 *   Only method names starting with "get", "has", or "is" and a few common
 *   methods such as "id", "label", and "bundle" are available. For example:
 *   - paragraph.getCreatedTime() will return the paragraph creation timestamp.
 *   - paragraph.id(): The paragraph ID.
 *   - paragraph.bundle(): The type of the paragraph, for example, "image" or "text".
 *   - paragraph.getOwnerId(): The user ID of the paragraph author.
 *   See Drupal\paragraphs\Entity\Paragraph for a full list of public properties
 *   and methods for the paragraph object.
 * - content: All paragraph items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - paragraphs: The current template type (also known as a "theming hook").
 *   - paragraphs--type-[type]: The current paragraphs type. For example, if the paragraph is an
 *     "Image" it would result in "paragraphs--type--image". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - paragraphs--view-mode--[view_mode]: The View Mode of the paragraph; for example, a
 *     preview would result in: "paragraphs--view-mode--preview", and
 *     default: "paragraphs--view-mode--default".
 * - view_mode: View mode; for example, "preview" or "full".
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @see template_preprocess_paragraph()
 *
 * @ingroup themeable
 */
#}
{% set classes = [
  'paragraph',
  'paragraph--type--' ~ paragraph.bundle|clean_class,
  view_mode ? 'paragraph--view-mode--' ~ view_mode|clean_class,
  not paragraph.isPublished() ? 'paragraph--unpublished',
  'links_wrapper'
] %}
{% set linkPresent = 0 %}
{% block paragraph %}
  <div{{ attributes.addClass(classes) }}>
    {% block content %}
    {% endblock %}
    {{ title_suffix.contextual_links }}
    {# if new window is checked, set the target #}
    {% if content.field_open_in_new_window.0['#markup'] != "Off" %}
      {% set target = 'target="_blank"' %}
    {% endif %}
    {# if there's a file, use that link #}
    {% if content.field_file_link.0 %}
      {% set linkPresent = 1 %}
      {# this is how you reference files(specifically document files) in paragraphs mmc 4.3.19 #}
      {% set href = file_url(paragraph.field_file_link.entity.field_document.entity.uri.value) %}
    {% elseif content.field_internal_or_external_link.0 %}
      {% set linkPresent = 1 %}
      {% set href = content.field_internal_or_external_link.0['#url'] %}
    {% endif %}
    {# build the <a> itself #}
    {% if linkPresent == 1 %}
      <a href="{{ href }}" title="{{ content.field_link_text.0['#context'].value }}" {{ target }}>
        <li>{{ content.field_link_text }}</li>
      </a>
    {% else %}
      <li>{{ content.field_link_text }}</li>
    {% endif %}
  </div>
{% endblock paragraph %}
