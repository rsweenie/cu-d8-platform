diff --git a/tests/contexts/tests_contexts_PanelizerContext.behat.inc b/tests/contexts/tests_contexts_PanelizerContext.behat.inc
new file mode 100644
index 0000000..f7ff8b8
--- /dev/null
+++ b/tests/contexts/tests_contexts_PanelizerContext.behat.inc
@@ -0,0 +1,128 @@
+<?php
+
+namespace Acquia\LightningExtension\Context;
+
+use Behat\Mink\Element\NodeElement;
+use Behat\Mink\Exception\ExpectationException;
+use Drupal\DrupalExtension\Context\DrupalSubContextBase;
+
+class PanelizerContext extends DrupalSubContextBase {
+
+  use AwaitTrait;
+
+  /**
+   * Places a block into a Panelizer layout via the wizard.
+   *
+   * @param string $label
+   *   The text name of the block.
+   * @param string $region
+   *   The name of the region in which to place the block.
+   *
+   * @When I place the :label block into the :region panelizer region
+   */
+  public function placeBlock($label, $region) {
+    $assert = $this->assertSession();
+
+    $assert->elementExists('named', ['link', 'Add new block'])->click();
+    $this->awaitAjax();
+
+    $assert->elementExists('named', ['link', $label])->click();
+    $this->awaitAjax();
+
+    $this->getSession()->getPage()->selectFieldOption('region', $region);
+    $this->awaitAjax();
+
+    $assert->elementExists('named', ['button', 'Add block'])->press();
+    $this->awaitAjax();
+
+    $this->assertBlock($label, $region);
+  }
+
+  /**
+   * Removes a block from a Panelizer layout via the wizard.
+   *
+   * Assumes that exactly one block with the given name exists in the given
+   * region.
+   *
+   * @param string $label
+   *   The label of the block to remove.
+   * @param string $region
+   *   The machine name of the region in which the block is currently placed.
+   *
+   * @When I remove the :label block from the :region panelizer region
+   */
+  public function removeBlock($label, $region) {
+    $row = $this->assertBlock($label, $region);
+
+    $assert = $this->assertSession();
+    $drop_button = $assert->elementExists('css', 'ul.dropbutton', $row);
+    $assert->elementExists('css', 'li.dropbutton-toggle', $drop_button)->click();
+    $assert->elementExists('named', ['link', 'Delete'], $drop_button)->click();
+  }
+
+  /**
+   * Asserts that a block is present in a specific region of a Panelizer layout.
+   *
+   * @param string $label
+   *   The block label.
+   * @param string $region
+   *   The machine name of the region in which the block is expected to be.
+   *
+   * @return \Behat\Mink\Element\NodeElement
+   *   The block's row in the table.
+   *
+   * @throws \Behat\Mink\Exception\ExpectationException if the block is not
+   * present as expected.
+   *
+   * @Then the :label block should be in the :region region
+   */
+  public function assertBlock($label, $region) {
+    $row = $this->getBlockRow($label, $region);
+    if ($row) {
+      return $row;
+    }
+    else {
+      throw new ExpectationException("Expected block '{$label}' to be present in '{$region}' region.", $this->getSession()->getDriver());
+    }
+  }
+
+  /**
+   * Returns the table row for a specific block in a specific region.
+   *
+   * @param string $block_label
+   *   The label of the block to locate.
+   * @param string $region
+   *   The machine name of the region in which the block is expected to be.
+   *
+   * @return \Behat\Mink\Element\NodeElement|null
+   *   The row element, or null if one was not found.
+   */
+  protected function getBlockRow($block_label, $region) {
+    $page = $this->getSession()->getPage();
+
+    // array_map() callback. Traverses from a region select list to the table
+    // row that contains it.
+    $row_map = function (NodeElement $select) {
+      // $select->containing DIV->table cell->table row.
+      return $select->getParent()->getParent()->getParent();
+    };
+
+    $elements = array_filter(
+      $page->findAll('css', 'table#blocks tr > td > div > select.block-region-select'),
+      function (NodeElement $element) use ($region) {
+        return $element->getValue() == $region;
+      }
+    );
+
+    /** @var NodeElement $row */
+    foreach (array_map($row_map, $elements) as $row) {
+      // The first cell is the one with the label; find() will return the first
+      // matched element, which should be the first cell.
+      $row_label = $row->find('css', 'td')->getText();
+      if (trim($row_label) == $block_label) {
+        return $row;
+      }
+    }
+  }
+
+}
diff --git a/tests/contexts/tests_contexts_PanelsIPEContext.behat.inc b/tests/contexts/tests_contexts_PanelsIPEContext.behat.inc
new file mode 100644
index 0000000..b586c0d
--- /dev/null
+++ b/tests/contexts/tests_contexts_PanelsIPEContext.behat.inc
@@ -0,0 +1,198 @@
+<?php
+
+namespace Acquia\LightningExtension\Context;
+
+use Drupal\DrupalExtension\Context\DrupalSubContextBase;
+
+/**
+ * Contains step definitions for interacting with Panels IPE.
+ */
+class PanelsIPEContext extends DrupalSubContextBase {
+
+  use AwaitTrait;
+
+  /**
+   * Asserts the presence of the Panels IPE tray.
+   *
+   * @return \Behat\Mink\Element\NodeElement
+   *   The Panels IPE tray element.
+   *
+   * @Then I should see the Panels IPE tray
+   */
+  public function assertTray() {
+    return $this->assertSession()->elementExists('css', '#panels-ipe-tray');
+  }
+
+  /**
+   * Returns the active Panels IPE tab's contents.
+   *
+   * @return \Behat\Mink\Element\NodeElement
+   *   The active tab's contents.
+   */
+  protected function getActiveTab() {
+    return $this->assertSession()
+      ->elementExists('css', '.ipe-tabs-content', $this->assertTray());
+  }
+
+  /**
+   * Opens a tab of the Panels IPE tray.
+   *
+   * @param string $tab
+   *   The title of the tab to activate.
+   *
+   * @return \Behat\Mink\Element\NodeElement
+   *   The tab contents.
+   *
+   * @When I open the :tab tab
+   */
+  public function openTab($tab) {
+    $assert = $this->assertSession();
+
+    // Assert that the tab exists...
+    $link = $assert->elementExists(
+      'named',
+      ['link', $tab],
+      $assert->elementExists('css', '.ipe-tabs', $this->assertTray())
+    );
+
+    // ...but only open it if not already active.
+    if ($link->getParent()->hasClass('active') == FALSE) {
+      $link->click();
+      $this->awaitAjax();
+    }
+
+    return $this->getActiveTab();
+  }
+
+  /**
+   * Opens a particular block category of the "Manage Content" tab.
+   *
+   * @param string $category
+   *   The category to open.
+   *
+   * @return \Behat\Mink\Element\NodeElement
+   *   The tab contents.
+   *
+   * @When I open the :category category
+   */
+  public function openCategory($category) {
+    $tab = $this->openTab('Manage Content');
+
+    // Assert that the category exists...
+    $link = $this->assertSession()
+      ->elementExists('css',
+        '.ipe-category[data-category="' . $category . '"]',
+        $tab
+      );
+
+    // ...but only open it if not already active.
+    if ($link->hasClass('active') == FALSE) {
+      $link->click();
+      $this->awaitAjax();
+    }
+
+    return $tab;
+  }
+
+  /**
+   * Asserts that a particular block plugin is available.
+   *
+   * @param string $plugin_id
+   *   The block plugin ID.
+   * @param string $category
+   *   (optional) The category to open.
+   *
+   * @return \Behat\Mink\Element\NodeElement
+   *   The link to instantiate the block plugin.
+   *
+   * @Then I should see the :plugin_id plugin
+   * @Then I should see the :plugin_id plugin in the :category category
+   */
+  public function assertPlugin($plugin_id, $category = NULL) {
+    return $this->assertSession()
+      ->elementExists(
+        'css',
+        '.ipe-block-plugin a[data-plugin-id="' . $plugin_id . '"]',
+        $category ? $this->openCategory($category) : $this->getActiveTab()
+      );
+  }
+
+  /**
+   * Instantiates a block plugin.
+   *
+   * @param string $plugin_id
+   *   The block plugin ID.
+   * @param string $category
+   *   (optional) The category in which the block plugin resides.
+   *
+   * @return \Behat\Mink\Element\NodeElement
+   *   The block plugin configuration form.
+   *
+   * @When I instantiate the :plugin_id block
+   * @When I instantiate the :plugin_id block from the :category category
+   */
+  public function instantiate($plugin_id, $category = NULL) {
+    $this->assertPlugin($plugin_id, $category)->click();
+    $this->awaitAjax();
+
+    return $this->assertSession()
+      ->elementExists('css', '.panels-ipe-block-plugin-form', $this->getActiveTab());
+  }
+
+  /**
+   * Places a block into a Panels IPE layout.
+   *
+   * @param string $plugin_id
+   *   The block plugin ID.
+   * @param string $category
+   *   (optional) The category in which the block plugin resides.
+   *
+   * @When I place the :plugin_id block from the :category category
+   * @When I place the :plugin_id block
+   */
+  public function place($plugin_id, $category = NULL) {
+    $this->instantiate($plugin_id, $category)->pressButton('Add');
+    $this->awaitAjax();
+  }
+
+  /**
+   * Saves the current IPE layout as a custom layout.
+   *
+   * @When I save the layout
+   */
+  public function save() {
+    $this->assertSession()
+      ->elementExists(
+        'named',
+        ['link', 'Save'],
+        $this->assertTray()
+      )
+      ->click();
+
+    $this->awaitAjax();
+  }
+
+  /**
+   * Changes the Panels IPE layout.
+   *
+   * @param string $category
+   *   The layout's category.
+   * @param string $layout_id
+   *   The layout's data-layout-id value.
+   *
+   * @When I change the layout to :layout_id from the :category category
+   */
+  public function changeLayout($category, $layout_id) {
+    $assert = $this->assertSession();
+
+    $assert->elementExists('named', ['link', 'Change Layout'])->click();
+    $this->awaitAjax();
+
+    $assert->elementExists('css', "a[data-category='$category']")->click();
+    $this->awaitAjax();
+
+    $assert->elementExists('css', "a[data-layout-id='$layout_id']")->click();
+    $this->awaitAjax();
+  }
+
+}
