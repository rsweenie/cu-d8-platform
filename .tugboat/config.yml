services:

  # What to call the service hosting the site.
  php:

#    visualdiffs:
#      # TODO: These are specific to alliance. Would there be a way to import site specific urls?
#      # SEE: https://docs.tugboat.qa/configuring-tugboat/#visual-diffs
#      # Check some pages using the default options
#      - /
#      - /residencies-fellowships
#      - /about
#      - /residencies-fellowships/frequently-asked-questions
#      - /creighton_profiles
#      - /about/creighton-university-arizona-health-education-alliance
#      - /profile
#      - /profile/shaghayegh-abdollahi-md
#      - /news
#      - /spotlight
#      - /node/7171
#      - /about/graduate-medical-education-office
#      - /about/creighton-university-arizona-health-education-alliance
#      - /residencies-fellowships
#      - /residencies-fellowships/residency-programs/emergency-medicine/curriculum

    # Use PHP with Apache
    # The -stretch label lets us use the old version of this container which doesn't break us ;)
    # But it's not static so it will probably still break in the future
    #image: tugboatqa/php:7.1-apache-stretch
    image: tugboatqa/php:7.2-apache-stretch

    # Set this as the default service. This does a few things
    #   1. Clones the git repository into the service container
    #   2. Exposes port 80 to the Tugboat HTTP proxy
    #   3. Routes requests to the preview URL to this service
    default: true

    # Wait until the mysql service is done building
    depends: mysql

    # A set of commands to run while building this service
    commands:

      # Commands that set up the basic preview infrastructure as well as system and Drupally things
      # shared across all websites
      init:
        # CU: Things needed to set up the LAMP stack

        # Install prerequisite packages
        - apt-get update
        - apt-get install -y mysql-client libbz2-dev libpng-dev libjpeg-dev libfreetype6-dev
        #- yes | pecl install mcrypt-1.0.2

        # Install PHP exts and mod-rewrite.
        - docker-php-ext-configure gd --enable-gd-native-ttf --with-freetype-dir=/usr/include/freetype2 --with-png-dir=/usr/include --with-jpeg-dir=/usr/include
        #- docker-php-ext-install bz2 dom filter gd hash json opcache pdo pdo_mysql session simplexml sodium spl tokenizer xml
        - docker-php-ext-install bz2 gd opcache pdo_mysql

        # CU: Our own custom php tweaks
        - cp "${TUGBOAT_ROOT}/.tugboat/php.ini" /usr/local/etc/php/conf.d/creighton.ini

        - a2enmod headers rewrite

        # Install drush-launcher
        - wget -O /usr/local/bin/drush https://github.com/drush-ops/drush-launcher/releases/download/0.6.0/drush.phar
        - chmod +x /usr/local/bin/drush

        # Link the document root to the expected path. Tugboat uses /docroot
        # by default. So, if Drupal is located at any other path in your git
        # repository, change that here. This example links /web to the docroot
        - ln -snf "${TUGBOAT_ROOT}/docroot" "${DOCROOT}"

        # Use the tugboat-specific Drupal settings
        - cp "${TUGBOAT_ROOT}/.tugboat/tugboat.settings.php" "${DOCROOT}/sites/default/settings/local.settings.php"

        # Install/update packages managed by composer, including drush
        - composer install --no-ansi

        # Our baseline is our defaulty Acquia setup
        - ${TUGBOAT_ROOT}/vendor/bin/blt -n --no-ansi setup

        # If blt setup fails, may need to try something like this:
        #- drush -r "${DOCROOT}" -y site-install standard

        # If there are issues running blt setup, another option is a simple
        # drupal install
        #- drush -r "${DOCROOT}" -y site-install standard

        # Generate a unique hash_salt to secure the site
        - echo "\$settings['hash_salt'] = '$(openssl rand -hex 32)';" >> "${DOCROOT}/sites/default/settings/local.settings.php"

        # Copy the files directory from an external server. The public
        # SSH key found in the Tugboat Repository configuration must be
        # copied to the external server in order to use rsync over SSH.
        #- mkdir -p "${DOCROOT}/sites/default/files"
        #- mkdir -p "${DOCROOT}/sites/default/files-private/temp"

        # Fix settings on /files dir
        - chown -R www-data:www-data "${DOCROOT}/sites/default/files-private"
        - chown -R www-data:www-data "${DOCROOT}/sites/default/files"
        - find "${DOCROOT}/sites/default/files" -type d -exec chmod 775 {} \;
        - find "${DOCROOT}/sites/default/files" -type f -exec chmod 664 {} \;

        - find "${DOCROOT}/sites/default/files-private" -type d -exec chmod 775 {} \;
        - find "${DOCROOT}/sites/default/files-private" -type f -exec chmod 664 {} \;

      # Commands that import files, databases,  or other assets. When an
      # existing preview is refreshed, the build workflow starts here,
      # skipping the init step, because the results of that step will
      # already be present.
      # Backstop install
        - curl -sL https://deb.nodesource.com/setup_12.x | sudo -E bash -
        - sudo apt-get install -y nodejs
        - sudo apt-get install gconf-service libxext6 libxfixes3 libxi6 libxrandr2 libxrender1 libcairo2 libcups2 libdbus-1-3 libexpat1 libfontconfig1 libgcc1 libgconf-2-4 libgdk-pixbuf2.0-0 libglib2.0-0 libgtk-3-0 libnspr4 libpango-1.0-0 libpangocairo-1.0-0 libstdc++6 libx11-6 libx11-xcb1 libxcb1 libxcomposite1 libxcursor1 libxdamage1 libxss1 libxtst6 libappindicator1 libnss3 libasound2 libatk1.0-0 libc6 ca-certificates fonts-liberation lsb-release xdg-utils wget
        - npm install --prefix ${TUGBOAT_ROOT}/tests/backstopjs/ backstopjs
      update:
        # CU: Things needed to establish a clean baseline env based on production

        # We do a composer install here for an edge case in which there is a drush version mismatch
        - composer install --no-ansi
        # Site alias specific build steps
        - ${TUGBOAT_ROOT}/.tugboat/scripts/tugboat-update.sh

        # Alternatively, another common practice is to use the
        # stage_file_proxy Drupal module. This module lets Drupal serve
        # files from another publicly-accessible Drupal site instead of
        # syncing the entire files directory into the Tugboat Preview.
        # This results in smaller previews and reduces the build time.
        #- drush -r "${DOCROOT}" pm-download stage_file_proxy
        #- drush -r "${DOCROOT}" pm-enable --yes stage_file_proxy
        #- drush -r "${DOCROOT}" variable-set stage_file_proxy_origin "http://www.example.com"

      # Commands that build the site. This is where you would add things
      # like feature reverts or any other drush commands required to
      # set up or configure the site. When a preview is built from a
      # base preview, the build workflow starts here, skipping the init
      # and update steps, because the results of those are inherited
      # from the base preview.
      build:
        # Use the tugboat-specific Drupal settings
        - cp "${TUGBOAT_ROOT}/.tugboat/tugboat.settings.php" "${DOCROOT}/sites/default/settings/local.settings.php"

        # Site alias specific build steps
        - /bin/bash ${TUGBOAT_ROOT}/.tugboat/scripts/tugboat-build.sh

        # All sites build steps

        # Any rsync done in the build script above may break file and directory settings, so them fix again
        - chown -R www-data:www-data "${DOCROOT}/sites/default/files"
        - find "${DOCROOT}/sites/default/files" -type d -exec chmod 775 {} \;
        - find "${DOCROOT}/sites/default/files" -type f -exec chmod 664 {} \;

        # CU: Things needed when updating code/config
        # CU TODO: Do we want to --no-dev flag on this composer install?
        - composer install --no-ansi
        - drush -r "${DOCROOT}" updatedb -y
        - drush -r "${DOCROOT}" config-import -y
        # Run config import a second time to capture changes from new config splits.
        - drush -r "${DOCROOT}" config-import -y
        - drush -r "${DOCROOT}" cron -y
        - drush -r "${DOCROOT}" cache-rebuild

        # Site alias specific post-build steps
        - /bin/bash ${TUGBOAT_ROOT}/.tugboat/scripts/tugboat-postbuild.sh

        # Run Backstop tests
        - cp "${TUGBOAT_ROOT}/.tugboat/scripts/backstop-test.sh" "${TUGBOAT_ROOT}/tests/backstopjs"

        # Just in case we need to log in as admin
        - drush -r "${DOCROOT}" uli
       # - ( 'cd ${TUGBOAT_ROOT}/tests/backstopjs && exec ${TUGBOAT_ROOT}/tests/backstopjs/backstop-test.sh' )

  # What to call the service hosting MySQL. This name also acts as the
  # hostname to access the service by from the php service.
  mysql:

    # Use the latest available 5.x version of MySQL
    image: tugboatqa/mysql:5

    # We need access to the git repository to install the intial DB image.
    checkout: true

    # A set of commands to run while building this service
    commands:

      # Commands that import files, databases,  or other assets. When an
      # existing preview is refreshed, the build workflow starts here,
      # skipping the init step, because the results of that step will
      # already be present.
      update:

        # Copy a database dump from an external server. The public
        # SSH key found in the Tugboat Repository configuration must be
        # copied to the external server in order to use scp.
        #- scp user@example.com:database.sql.gz /tmp/database.sql.gz
        #- zcat /tmp/database.sql.gz | mysql tugboat
        #- rm /tmp/database.sql.gz

        # Install the initial DB backup as a base.
        # - zcat "${TUGBOAT_ROOT}/.tugboat/live-reference-db.sql.gz" | mysql tugboat
        #- ${TUGBOAT_ROOT}/.tugboat/db-update.sh

      # Commands that build the site. This is where you would add things
      # like feature reverts or any other drush commands required to
      # set up or configure the site. When a preview is built from a
      # base preview, the build workflow starts here, skipping the init
      # and update steps, because the results of those are inherited
      # from the base preview.
      build:
